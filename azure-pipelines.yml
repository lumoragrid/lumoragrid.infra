# LumoraGrid Terraform – Azure DevOps (bootstrap + dev→test→uat→prod)

trigger:
  branches: { include: [ main ] }
  paths: { include: [ envs/**, modules/**, azure-pipelines.yml ] }

pr:
  branches: { include: [ main, feature/* ] }
  paths: { include: [ envs/**, modules/**, azure-pipelines.yml ] }

variables:
- group: lumoragrid-shared
- name: TF_VERSION
  value: '1.7.5'

stages:
# ---------- BOOTSTRAP (idempotent): state + provider registration ----------
- stage: bootstrap
  displayName: Bootstrap (tfstate + providers)
  jobs:
  - job: bootstrap_job
    displayName: Ensure tfstate + register providers
    pool: { vmImage: ubuntu-latest }
    steps:
    - task: AzureCLI@2
      displayName: Azure login
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az account show

    - task: AzureCLI@2
      displayName: Create/ensure tfstate RG + Storage + Container
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          RG="$(TFSTATE_RG)"
          SA="$(TFSTATE_ACCOUNT)"
          CN="$(TFSTATE_CONTAINER)"
          LOC="$(LOCATION)"

          az group show -n "$RG" >/dev/null 2>&1 || az group create -n "$RG" -l "$LOC"

          if ! az storage account show -g "$RG" -n "$SA" >/dev/null 2>&1; then
            az storage account create -n "$SA" -g "$RG" -l "$LOC" --sku Standard_LRS --kind StorageV2 --min-tls-version TLS1_2
            az storage account blob-service-properties update \
              --account-name "$SA" \
              --enable-versioning true \
              --enable-delete-retention true \
              --delete-retention-days 7 \
              --enable-container-delete-retention true \
              --container-delete-retention-days 7
          fi

          ACCOUNT_KEY=$(az storage account keys list -g "$RG" -n "$SA" --query [0].value -o tsv)
          az storage container create --name "$CN" --account-name "$SA" --account-key "$ACCOUNT_KEY" >/dev/null || true
          echo "tfstate ready: rg=$RG sa=$SA container=$CN"

    - task: AzureCLI@2
      displayName: Register resource providers
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          for p in Microsoft.Storage Microsoft.KeyVault Microsoft.DocumentDB Microsoft.ServiceBus Microsoft.Sql Microsoft.Insights Microsoft.Network; do
            az provider register --namespace $p --wait
          done
          echo "Providers registered."

# ---------- DEV ----------
- stage: dev
  displayName: DEV (plan/apply)
  dependsOn: bootstrap
  jobs:
  - job: tf_dev
    displayName: Terraform DEV
    pool: { vmImage: ubuntu-latest }
    steps:
    - script: |
        set -e
        curl -fsSL https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip -o tf.zip
        sudo unzip -o tf.zip -d /usr/local/bin
        terraform -version
      displayName: Install Terraform

    - task: AzureCLI@2
      displayName: Init + Plan (dev)
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: envs/dev
        inlineScript: |
          set -e
          terraform init -reconfigure \
            -backend-config="resource_group_name=$(TFSTATE_RG)" \
            -backend-config="storage_account_name=$(TFSTATE_ACCOUNT)" \
            -backend-config="container_name=$(TFSTATE_CONTAINER)" \
            -backend-config="key=lumoragrid-dev.tfstate"
          terraform validate
          terraform plan -var-file=dev.tfvars \
            -var "sql_admin_password=$(SQL_ADMIN_PASSWORD)" \
            -out=tfplan
        env:
            ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
            ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
            ARM_TENANT_ID:        $(ARM_TENANT_ID)
            ARM_SUBSCRIPTION_ID:  $(AZURE_SUBSCRIPTION_ID)

    - task: AzureCLI@2
      displayName: Apply (dev – only on main)
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
        scriptType: bash
        scriptLocation: inlineScript
        workingDirectory: envs/dev
        inlineScript: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID:        $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID:  $(AZURE_SUBSCRIPTION_ID)

# ---------- TEST ----------
- stage: test
  displayName: TEST (plan/apply)
  dependsOn: dev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: tf_test
    displayName: Terraform TEST
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              set -e
              curl -fsSL https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip -o tf.zip
              sudo unzip -o tf.zip -d /usr/local/bin
              terraform -version
            displayName: Install Terraform
          - task: AzureCLI@2
            displayName: Init + Plan + Apply (test)
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: envs/test
              inlineScript: |
                set -e
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(TFSTATE_RG)" \
                  -backend-config="storage_account_name=$(TFSTATE_ACCOUNT)" \
                  -backend-config="container_name=$(TFSTATE_CONTAINER)" \
                  -backend-config="key=lumoragrid-test.tfstate"
                terraform validate
                terraform plan -var-file=test.tfvars \
                  -var "sql_admin_password=$(SQL_ADMIN_PASSWORD)" \
                  -out=tfplan
                terraform apply -auto-approve tfplan
              env:
                ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID:        $(ARM_TENANT_ID)
                ARM_SUBSCRIPTION_ID:  $(AZURE_SUBSCRIPTION_ID)

# ---------- UAT ----------
- stage: uat
  displayName: UAT (plan/apply)
  dependsOn: test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: tf_uat
    displayName: Terraform UAT
    environment: 'uat'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              set -e
              curl -fsSL https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip -o tf.zip
              sudo unzip -o tf.zip -d /usr/local/bin
              terraform -version
            displayName: Install Terraform
          - task: AzureCLI@2
            displayName: Init + Plan + Apply (uat)
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: envs/uat
              inlineScript: |
                set -e
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(TFSTATE_RG)" \
                  -backend-config="storage_account_name=$(TFSTATE_ACCOUNT)" \
                  -backend-config="container_name=$(TFSTATE_CONTAINER)" \
                  -backend-config="key=lumoragrid-uat.tfstate"
                terraform validate
                terraform plan -var-file=uat.tfvars \
                  -var "sql_admin_password=$(SQL_ADMIN_PASSWORD)" \
                  -out=tfplan
                terraform apply -auto-approve tfplan
              env:
                ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID:        $(ARM_TENANT_ID)
                ARM_SUBSCRIPTION_ID:  $(AZURE_SUBSCRIPTION_ID)

# ---------- PROD ----------
- stage: prod
  displayName: PROD (plan/apply)
  dependsOn: uat
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: tf_prod
    displayName: Terraform PROD
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              set -e
              curl -fsSL https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip -o tf.zip
              sudo unzip -o tf.zip -d /usr/local/bin
              terraform -version
            displayName: Install Terraform
          - task: AzureCLI@2
            displayName: Init + Plan + Apply (prod)
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: envs/prod
              inlineScript: |
                set -e
                terraform init -reconfigure \
                  -backend-config="resource_group_name=$(TFSTATE_RG)" \
                  -backend-config="storage_account_name=$(TFSTATE_ACCOUNT)" \
                  -backend-config="container_name=$(TFSTATE_CONTAINER)" \
                  -backend-config="key=lumoragrid-prod.tfstate"
                terraform validate
                terraform plan -var-file=prod.tfvars \
                  -var "sql_admin_password=$(SQL_ADMIN_PASSWORD)" \
                  -out=tfplan
                terraform apply -auto-approve tfplan
              env:
                ARM_CLIENT_ID:        $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET:    $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID:        $(ARM_TENANT_ID)
                ARM_SUBSCRIPTION_ID:  $(AZURE_SUBSCRIPTION_ID)